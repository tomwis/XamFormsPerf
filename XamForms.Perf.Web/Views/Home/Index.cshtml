@model Dictionary<XamForms.Perf.Web.Models.TestMetadata, List<XamForms.Perf.Web.Models.TestTablePoint>>
@{
    ViewBag.Title = "Xamarin Forms Performance";
}

<div class="jumbotron">
    <h1>Xamarin Forms Performance</h1>
    <p>Below values were made on real devices in Release mode.</p>
</div>

<div>
    @{
        var columns = 2;
        int i = 0;
        string neutralColor = "00A7FF"; // blue
        string positiveColor = "4EED6D"; // green
        string negativeColor = "FF0053"; // red

        foreach (var item in Model)
        {
            if (i % columns == 0)
            {
                @:<div class="row">
            }

            @:<div class="col-md-6">


            <h3>@item.Key.Name</h3>
            <p>@item.Key.Description</p>

            item.Value.Reverse();
            var versions = item.Value.Select(s => s.Version);
            var times = item.Value.Select(s => s.AvgMs);
            var barBg = item.Value.Select(s => GetDiffColor(s.DiifFromLast, 0.2));
            var barBorder = item.Value.Select(s => GetDiffColor(s.DiifFromLast, 1));
            var diffLabels = item.Value.Select(s => GetDiffLabel(s.DiifFromLast)).ToList();
            var models = item.Value.Select(s => s.Model);
            var osVersions = item.Value.Select(s => s.OsVersion);

            if(models.Distinct().Count() > 1 || osVersions.Distinct().Count() > 1)
            {
                <p><small>Not all test were made on the same device or system version. Hover on columns to get more details.</small></p>
            }

            string GetDiffLabel(double diff)
            {
                if (diff == Double.MaxValue)
                {
                    return string.Empty;
                }

                var sign = "";
                if (diff >= 0)
                {
                    sign = "-";
                }
                else
                {
                    sign = "+";
                }

                var diffStr = (diff * 100).ToString().TrimStart('-');

                return $"({sign}{diffStr}%)";
            }

            string GetDiffColor(double diff, double alpha)
            {
                if (diff == Double.MaxValue)
                {
                    return GetJsColor(neutralColor, alpha);
                }

                if (diff >= 0)
                {
                    return GetJsColor(positiveColor, alpha);
                }

                return GetJsColor(negativeColor, alpha);
            }

            string GetJsColor(string hex, double alpha)
            {
                if (hex.Length != 6) return string.Empty;

                return $"rgba(" +
                            $"{Convert.ToByte(hex.Substring(0, 2), 16)}, " +
                            $"{Convert.ToByte(hex.Substring(2, 2), 16)}, " +
                            $"{Convert.ToByte(hex.Substring(4, 2), 16)}, " +
                            $"{alpha.ToString(System.Globalization.CultureInfo.InvariantCulture)})";
            }

            var chartId = item.Key.Id.Replace(" ", "");

            <canvas id="test_chart_@(chartId)" class="test_chart" width="400" height="200"></canvas>

            <script>
                var diffLabelsJs_@(chartId) = @Html.Raw(Json.Encode(diffLabels));
                var timesJs_@(chartId) = @Html.Raw(Json.Encode(times));
                var modelsJs_@(chartId) = @Html.Raw(Json.Encode(models));
                var osVersionsJs_@(chartId) = @Html.Raw(Json.Encode(osVersions));

                var ctx = document.getElementById("test_chart_@(chartId)").getContext('2d');
                var myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: @Html.Raw(Json.Encode(versions)),
                        datasets: [{
                            label: 'Time [ms]',
                            data: @Html.Raw(Json.Encode(times)),
                            backgroundColor: @Html.Raw(Json.Encode(barBg).Replace("\"", "'")),
                            borderColor: @Html.Raw(Json.Encode(barBorder).Replace("\"", "'")),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Time [ms]'
                                }
                            }],
                            xAxes: [{
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Xamarin.Forms Version'
                                }
                            }]
                        },
                        tooltips: {
                            callbacks: {
                                label: function (tooltipItem, chart) {
                                    var time = " " + timesJs_@(chartId)[tooltipItem.index] + " ms " + diffLabelsJs_@(chartId)[tooltipItem.index];
                                    var device = modelsJs_@(chartId)[tooltipItem.index] + " (" + osVersionsJs_@(chartId)[tooltipItem.index] + ")";
                                    return time + "  |  " + device;
                                }
                            }
                        },
                        legend: {
                            display: false
                        },
                        plugins: {
                            datalabels: {
                                formatter: function (value, context) {
                                    var diff = diffLabelsJs_@(chartId)[context.dataIndex].replace('(', '').replace(')', '');
                                    return diff;
                                },
                                textAlign: 'center',
                                font: {
                                    weight: 'bold'
                                }
                            }
                        }
                    }
                });
            </script>

            if (i % columns == columns - 1)
            {
                @:</div>
            }

            @:</div>


            ++i;
        }
    }
</div>